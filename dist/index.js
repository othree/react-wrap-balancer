"use client"
"use client";var I=Object.create;var m=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var W=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var w=(e,n)=>{for(var t in n)m(e,t,{get:n[t],enumerable:!0})},_=(e,n,t,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of P(n))!$.call(e,o)&&o!==t&&m(e,o,{get:()=>n[o],enumerable:!(r=M(n,o))||r.enumerable});return e};var v=(e,n,t)=>(t=e!=null?I(W(e)):{},_(n||!e||!e.__esModule?m(t,"default",{value:e,enumerable:!0}):t,e)),L=e=>_(m({},"__esModule",{value:!0}),e);var K={};w(K,{Balancer:()=>O,Provider:()=>C,default:()=>H});module.exports=L(K);var l=v(require("react"));var u=v(require("react")),b=typeof window=="undefined",y=b?u.default.useEffect:u.default.useLayoutEffect,Y=0,R=()=>++Y,S=!1;function A(){let[e,n]=u.default.useState(S?R:void 0);return y(()=>{e===void 0&&n(R()),S=!0},[]),e===void 0?e:`rwb-${e.toString(32)}`}function T(){return u.default.useMemo(()=>"useId"in u.default?u.default.useId:A,[])()}var E="__wrap_b",d="__wrap_n",g="__wrap_o",h=(e,n,t)=>{t=t||document.querySelector(`[data-br="${e}"]`);let r=t==null?void 0:t.parentElement;if(!r)return;let o=f=>t.style.maxWidth=f+"px";t.style.maxWidth="";let c=r.clientWidth,a=r.clientHeight,s=c/2-.25,i=c+.5,p;if(c){for(o(s),s=Math.max(t.scrollWidth,s);s+1<i;)p=Math.round((s+i)/2),o(p),r.clientHeight===a?i=p:s=p;o(i*n+c*(1-n))}t.__wrap_o||(typeof ResizeObserver!="undefined"?(t.__wrap_o=new ResizeObserver(()=>{self.__wrap_b(0,+t.dataset.brr,t)})).observe(r):process.env.NODE_ENV==="development"&&console.warn("The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information"))},N=h.toString(),V='(self.CSS&&CSS.supports("text-wrap","balance")?1:2)',x=(e,n,t="")=>(t&&(t=`self.${d}!=1&&${t}`),l.default.createElement("script",{suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:(e?"":`self.${d}=self.${d}||${V};self.${E}=${N};`)+t},nonce:n})),B=l.default.createContext({preferNative:!0,hasProvider:!1}),C=({preferNative:e=!0,nonce:n,children:t})=>{let r=l.default.useMemo(()=>({preferNative:e,hasProvider:!0}),[e]);return l.default.createElement(B.Provider,{value:r},x(!1,n),t)},O=({ratio:e=1,preferNative:n,nonce:t,children:r,...o})=>{let c=T(),a=l.default.useRef(),s=l.default.useContext(B),i=n!=null?n:s.preferNative,p=o.as||"span";return y(()=>{i&&self[d]===1||a.current&&(self[E]=h)(0,e,a.current)},[r,i,e]),y(()=>{if(!(i&&self[d]===1))return()=>{if(!a.current)return;let f=a.current[g];f&&(f.disconnect(),delete a.current[g])}},[i]),process.env.NODE_ENV==="development"&&r&&!Array.isArray(r)&&typeof r=="object"&&"type"in r&&typeof r.type=="string"&&r.type!=="span"&&console.warn(`<Balancer> should not wrap <${r.type}> inside. Instead, it should directly wrap text or inline nodes.

Try changing this:
  <Balancer><${r.type}>content</${r.type}></Balancer>
To:
  <${r.type}><Balancer>content</Balancer></${r.type}>`),l.default.createElement(l.default.Fragment,null,l.default.createElement(p,{...o,"data-br":c,"data-brr":e,ref:a,style:{display:"inline-block",verticalAlign:"top",textDecoration:"inherit",textWrap:i?"balance":"initial"},suppressHydrationWarning:!0},r),x(s.hasProvider,t,`self.${E}("${c}",${e})`))};if(!b&&process.env.NODE_ENV!=="production"){let e=document.querySelector("[data-next-hide-fouc]");if(e){let n=r=>{for(let o of r)for(let c of Array.from(o.removedNodes)){if(c!==e)continue;t.disconnect();let a=document.querySelectorAll("[data-br]");for(let s of Array.from(a))self[E](0,+s.dataset.brr,s)}},t=new MutationObserver(n);t.observe(document.head,{childList:!0})}}var H=O;0&&(module.exports={Balancer,Provider});
//# sourceMappingURL=index.js.map